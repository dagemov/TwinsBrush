<nav>
    <ul class="pagination">
        @foreach (var link in Links)
        {
            <li @onclick="@(() => InternalSelectedPage(link))" style="cursor:pointer"
                class="page-item @(link.Enable ? null : "disabled") @(link.Active ? "active" : null)">
                <a class="page-link">@link.Text</a>
            </li>
        }
    </ul>
</nav>


@code {

    [Parameter]
    public int CurrentPage { get; set; } = 1;
    [Parameter]
    public int TotalPages { get; set; }
    [Parameter]
    public int Radio { get; set; } = 5;
    [Parameter]
    public EventCallback<int> SelectedPage { get; set; }

    List<PageModel> Links = new();

    class PageModel
    {
        public string Text { get; set; } = null!;
        public int Page { get; set; }
        public bool Enable { get; set; } = true;
        public bool Active { get; set; } = false;
    }
    private async Task InternalSelectedPage(PageModel pageModel)
    {
        if (pageModel.Page == CurrentPage || pageModel.Page == 0)
        {
            return;
        }
        await SelectedPage.InvokeAsync(pageModel.Page);
    }
    protected override void OnParametersSet()
    {
        Links = new List<PageModel>();
        var previousLinkEnable = CurrentPage != 1;
        var previousLinkPage = CurrentPage - 1;

        Links.Add(new PageModel
            {
                Text = "Anterior",
                Page = previousLinkPage,
                Enable = previousLinkEnable
            });

        int startPage;
        int endPage;

        // Calulate Start and end Buttons size in this case 10 in 10
        startPage = ((CurrentPage - 1) / 10) * 10 + 1;
        endPage = Math.Min(startPage + 9, TotalPages);

        // Load buttons every 10 each + example we are in the number 10 and we press next
        //remember OnParameterSet is a cicle , so for that we only need 1 for 
        for (int i = startPage; i <= endPage; i++)
        {
            Links.Add(new PageModel
                {
                    Page = i,
                    Enable = true,
                    Active = CurrentPage == i,
                    Text = $"{i}"
                });
        }

        var linkNextEnable = CurrentPage != TotalPages && TotalPages != CurrentPage;
        var linkNextPage = CurrentPage + 1;

        if (CurrentPage < TotalPages)
        {
            Links.Add(new PageModel
                {
                    Text = "Next",
                    Page = linkNextPage,
                    Enable = linkNextEnable
                });
        }
    }
}
