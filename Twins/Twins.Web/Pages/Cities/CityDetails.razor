@page "/cities/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager nav
@inject SweetAlertService swl

@if (city is null)
{
    <p>Loading</p>
}
else
{
    <h3>@city.Name Details</h3>
    <div class="mb-3">
        <a class="btn btn-primary" href="/streets/create/@city.Id">New Street</a>
        <a class="btn btn-success" href="/states/details/@city.StateId">Back</a>
    </div>
    <Pagination CurrentPage="currentPage" TotalPages="totalPage" SelectedPage="SelectPageAsync" /> 
<GenericList MyList="Streets">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Street Name</th>
                    <th>Street Number</th>
                    <th>Zip Code Area</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var street in Streets!)
                {
                    <tr>

                        <td>
                            @street.Name
                        </td>                       
                        <td>
                            @street.StreetNumber
                        </td>
                        <td>
                            @street.ZipCode
                        </td>
                        <td>
                            <a class="btn btn-warning" href="/streets/edit/@street.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(()=>StreetDeleteAsync(street.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
}

@code {

    private Street? Street;
    private City? city;
    private int totalPage;
    private int currentPage=1;
    [Parameter]
    public int Id { get; set; }

    public List<Street>? Streets { get; set; }
    public async Task SelectPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync(int page=1)
    {
        var urlStreets = $"/api/streets?id={Id}&page{page}/";
        var urlTotalPages = $"/api/streets/totalPages?id={Id}";

        var responHttpData = await repository.Get<City>($"/api/cities/{Id}");
        if (responHttpData.Error)
        {
            if (responHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo($"/cities/details/{Street!.CityId}");
                return;
            }
            var message = await responHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        var responseHttpStreets = await repository.Get<List<Street>>(urlStreets);
        if (responseHttpStreets.Error)
        {
            if (responseHttpStreets.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo($"/cities/details/{Street!.CityId}");
                return;
            }
            var message = await responseHttpStreets.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        var responseHttpTotalPages = await repository.Get<int>(urlTotalPages);

        city = responHttpData.Response;
        Streets = responseHttpStreets.Response;
        totalPage = responseHttpTotalPages.Response;
        //Streets = city.Streets.ToList();
    }
    private async Task StreetDeleteAsync(int id)
    {
        var responseHttpData = await repository.Get<Street>($"/api/streets/{id}");
        if (responseHttpData.Error)
        {
            if (responseHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo($"/cities/details/{Street!.CityId}");
                return;
            }
            var message = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        Street = responseHttpData.Response;
        var resultSwl = await swl.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm Delete",
                Text = $"Are you sure abaout Delete this Street ? : < {Street!.StreetNumber} {Street!.Name} {Street.ZipCode}  > ",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes",
            });
        var confirmSwl = string.IsNullOrEmpty(resultSwl.Value);
        if (confirmSwl)
        {
            return;
        }

        var responseHttpDelete = await repository.Delete($"/api/streets/{id}");
        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                nav.NavigateTo($"/cities/details/{Street!.CityId}");
                return;
            }
            var messageDelete = await responseHttpDelete.GetErrorMessageAsync();
            await swl.FireAsync("Error", messageDelete, SweetAlertIcon.Error);
            return;
        }
        await LoadAsync();
    }
}
