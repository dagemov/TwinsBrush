@page "/services/details/{Id:int}"
@inject NavigationManager nav
@inject SweetAlertService swl
@inject IRepository repository
<h3>ServicesDetails</h3>

<link rel="stylesheet" href="https://localhost:5001/css/Services.css" />

@if(service == null){
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <div class="d-flex justify-content-between align-items-center">
                <div class="d-flex justify-content-start align-items-center">
                    <i class="oi oi-bookmark"></i> @service.Name Service
                </div>
                <div class="ml-auto">
                    <i class="oi oi-x btn btn-danger" @onclick="CloseModal"></i>
                </div>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div class="col-6 ">
                    <div class="m-3">
                        <h5 style="color:purple"> Name : <i class="oi oi-info"></i></h5>
                        <label>@service.Name</label>
                    </div>
                    <div class="m-3">
                        <h5 style="color:purple">Description : <i class="oi oi-document"></i> </h5>                        
                        <label>@service.Description</label>
                    </div> 
                    <div class="m-3">
                        <h5 style="color:purple">Status Type Of Service : <i class="oi oi-tags"></i></h5> 
                        <label>@service.ServiceStatusType</label>
                    </div>
                    <div class="m-3">
                        <h5 style="color:darkblue">Price by Hour : <i class="oi oi-clock"></i></h5>

                        <label>@service.PriceService <i class="oi oi-dollar"></i></label>
                    </div>
                    <div class="m-3">
                        <h5 style="color:darkblue">Price Final with taz Inlcude</h5>                        
                        <label>@service.FinalPrice <i class="oi oi-dollar"></i></label>
                    </div>
                    <div class="m-3">
                        <h5 style="color:darkblue">Created Date : <i class="oi oi-calendar"></i></h5>                       
                        <label>@service.Created</label>
                    </div>
                    <div class="m-3">
                        <h5 style="color:darkgoldenrod"> Toltal Emplooyees in this service : <i class="oi oi-people"></i></h5>
                        
                        <label>@EmplooyesCount</label>
                       
                    </div>                                                         
                  
                </div>
                <div class="col-6">
                   <div class="row">
                       <h5>Refences Pictures : <i class="oi oi-camera-slr"></i></h5>
                        <img src="/Images/ServicesExample/DeepCleanService.jpg" class="imagenDetailsScreen" />
                        <br>
                        <div>
                            <h5>Customer Info :</h5>
                            <img src="/Images/ServicesExample/ManngerSara.jpg" class="imagenDetailsScreen">
                        </div>
                        <div>
                            @if (FindCustomer(ServicesCustomer!, service.Id) != null)
                            {
                                @if (user!.UserType == UserType.User)
                                {
                                    <h5>Name : @user.FirstName </h5>
                                    <h5>Last Name : @user.LastName </h5>
                                    <h5>Phone Number : @user.PhoneNumber</h5>
                                }
                            }
                            else
                            {
                                <p>No customers yet</p>
                            }

                        </div>
                        address
                   </div>
                    
                </div>
            </div>
        </div>
        <div class="card-footer mt-3">
            <AuthorizeView Roles="Admin,Mannager">
                <Authorized>
                    <div class="d-flex justify-content-between">
                        <a class="btn btn-primary oi oi-plus" @onclick=@(()=>ShowModal(service.Id,true,1))> Add Employed</a>
                        <a class="btn btn-secondary oi oi-plus" @onclick=@(()=>ShowModal(service.Id,true,2))>Add address</a>
                        <a class="btn btn-warning oi oi-plus" @onclick=@(()=>ShowModal(service.Id,true,3))> Add Customer</a>
                        <a class="btn btn-success oi oi-people" href="/services/showEmplooyes/@service.Id"> Employees</a>
                        <a class="btn btn-primary" href="/services/addEmployedService/@service.Id">test Radzen</a>
                    </div>
                </Authorized>
                <NotAuthorized>
                   <div class="row">
                        <div class="m-3 d-flex justify-content-center">
                            <label>@DateTime.Now</label>
                       </div>
                        
                       <div class="m-3 d-flex justify-content-center">
                           <a class="btn btn-primary">Clock Times <i class="oi oi-clock"></i></a>                       
                       </div>
                   </div>
                </NotAuthorized>
            </AuthorizeView>
                       
        </div>
    </div>
}

@code {
    //Arreglar bug contador de employes , cada vez que se llama add employe se cuenta
    [Parameter]
    public int Id{ get; set; }

    private Service? service;
    private ServiceUser? serviceUser;
    private User? user; 
    private int currentPage = 1;
    private int totalPages;
    private int EmplooyesCount = 0;
    public List<User>? Users { get; set; }
    public List<ServicesCustomer>? ServicesCustomer { get; set; }
    public List<ServiceUser>? ServiceUsers{ get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    public event EventHandler ModalClosed;

    private bool isModalOpen = false;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();

    }
    private async Task LoadAsync()
    {
        var httpResponseGetData = await repository.Get<Service>($"/api/services/{Id}");
        if (httpResponseGetData.Error)
        {
            if (httpResponseGetData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/services");
                return;
            }
            var message = await httpResponseGetData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
        }
        service = httpResponseGetData.Response;
        try
        {
            var responseHttpDataServiceUser = await repository.Get<List<ServicesCustomer>>($"api/servicesCustomer");
            if (responseHttpDataServiceUser.Error)
            {
                var message = await responseHttpDataServiceUser.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            ServicesCustomer = responseHttpDataServiceUser.Response;

            var responseHttpDataServiceEmplooye = await repository.Get<List<ServiceUser>>($"api/servicesUsers");
            if (responseHttpDataServiceEmplooye.Error)
            {
                var message = await responseHttpDataServiceEmplooye.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            }
            ServiceUsers = responseHttpDataServiceEmplooye.Response;
            CountEmployeesInService(ServiceUsers!);
        }
        catch (Exception ex)
        {
            await swl.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
        if (FindCustomer == null)
        {
            await swl.FireAsync("No record", "There aren't Customer in this service\n Do u wanna register one ?", SweetAlertIcon.Question);
        }
    }
    private async Task ShowModal(int id = 0, bool isEdit = false, int option = 0)
    {
        IModalReference modalReference = null!;

        if (isEdit && option == 1)
        {
            modalReference = Modal.Show<AddEmployed>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else if (isEdit && option == 2)
        {
            modalReference = Modal.Show<AddAddressService>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else if (isEdit && option == 3)
        {
            modalReference = Modal.Show<AddCustomerService>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<ServiceCreate>();
        }

        await CloseSubModalConfirm(modalReference);
    }

    private async Task CloseSubModalConfirm(IModalReference modalReference)
    {
        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
    private async Task CloseModal()
    {
        await BlazoredModal.CloseAsync(ModalResult.Ok());
    }


    private object FindCustomer(List<ServicesCustomer> models, int id)
    {
        for (var i = 0; i < models.Count(); i++)
        {
            if (models[i].ServiceId == Id )
            {
                var Cliente = models[i].User;
                user = new()
                    {
                        FirstName = Cliente.FirstName,
                        LastName = Cliente.LastName,
                        PhoneNumber = Cliente.PhoneNumber,
                        Documment = Cliente.Documment,
                        Photo = Cliente.Photo
                    };
                user = Cliente;
            }
        }
        return user!;
    }
    private int CountEmployeesInService(List<ServiceUser> Users)
    {
        foreach (var user in Users)
        {
            if (user.User.UserType == UserType.Employed)
            {
                if (user.ServiceId == Id)
                {
                    EmplooyesCount++;
                }

            }
        }
        //return EmplooyesCount = Users == null ? 0 : Users.Count(); ;
        return EmplooyesCount;
    }

}
