@inject SweetAlertService swl

<NavigationLock OnBeforeInternalNavigation="OnBeforeInternalNavigation" />
<EditForm EditContext="EditContext" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            Service <i class="oi oi-book"></i>
            <div class="d-flex justify-content-end">
                <i class="oi oi-x btn btn-danger" @onclick="CloseModal"></i>
            </div>
        </div>
        <div class="card-body">
            <div class="mb-3">
                <label>Service : </label>
                <div>
                    <label>Name Service</label>
                    <InputText class="form-control" @bind-Value="@Service.Name" />
                    <ValidationMessage For="@(()=>Service.Name)" />
                </div>
                <div>
                    <label>Description Of this Service</label>
                    <InputText class="form-control" @bind-Value="@Service.Description" />
                    <ValidationMessage For="@(()=>Service.Description)" />
                </div>
                <div>
                    <label> Price By Hour <i class="oi oi-dollar"></i></label>
                    <InputNumber class="form-control" @bind-Value="@Service.PriceService" />
                    <ValidationMessage For="@(()=>Service.PriceService)" />
                </div>
                <div>
                    <label>Actual Taz <i class="oi oi-calculator"></i></label>
                    <InputNumber class="form-control" @bind-Value="@Service.Taz" placeholder="Example 0.14" />
                    <ValidationMessage For="@(()=>Service.Taz)" />
                </div>
                <div>
                    <label>Status Service <i class="oi oi-tag"></i></label>
                    <select class="form-select" @bind="@serviceStatusType">
                        <option value="0">-- Choose Service Status --</option>
                        @foreach (var Status in Enum.GetValues(typeof(ServiceStatusType)))
                        {
                            <option value="@Status">@Status</option>
                        }
                    </select>
                    <ValidationMessage For="@(()=>Service.ServiceStatusType)" />
                </div>
            </div>
        </div>
        <div class=" card-footer ">
            <div class="d-flex justify-content-center">
                <button type="submit" class="btn btn-primary ">Save</button>               
            </div>
           
        </div>
    </div>   
</EditForm>

@code {
    private EditContext EditContext = null!;

    private ServiceStatusType serviceStatusType{ get; set; }

    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    [Parameter]
    [EditorRequired]
    public Service Service { get; set; } = null!;

    [Parameter]
    [EditorRequired]
    public EventCallback OnValidSubmit { get; set; }

    [Parameter]
    [EditorRequired]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessFully { get; set; }

    protected override void OnInitialized()
    {
        EditContext = new(Service);
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasMofied = EditContext.IsModified();
        if (!formWasMofied || FormPostedSuccessFully)
        {
            return;
        }
        //He don't finihsed the form or he try out the site
        var result = await swl.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm",
                Text = "Do you want left the page and lose the changes ?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes"
            });

        var confirm = !string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
    private void CloseModal()
    {
        BlazoredModal.CloseAsync(ModalResult.Ok());
    }
}
