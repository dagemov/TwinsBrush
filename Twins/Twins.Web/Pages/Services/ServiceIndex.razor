@page "/services"

@inject NavigationManager nav;
@inject SweetAlertService swl;
@inject IRepository repository;

@attribute [Authorize(Roles = "Admin,Mannager")]

@if(Services is null){
    <div class="spinner" />
}
else
{

    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-Book"></i> Services
                <a class="btn btn-sm btn-primary float-end" @onclick=@(()=>ShowModal())><i class="oi oi-plus"></i> Add Service</a>
            </span>
        </div>
        <div class="card-body">

            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search Country.." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filter</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Clean</button>
                </div>
            </div>
            <Pagination CurrentPage="currentPage" TotalPages="1" SelectedPage="SelectedPageAsync" />
            <GenericList MyList="Services">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Date Service</th>
                                <th>Service</th>
                                <th style="width:220px">Users</th> <!--Para que no se muevan los botones de paginacion , darles size static-->
                                <th style="width:260px"></th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var service in Services!)
                            {
                                <tr>
                                    <th>
                                        @service.Created
                                    </th>
                                    <td>
                                        @service.Name
                                    </td>
                                    <td>
                                        @service.UserCount
                                    </td>
                                    <td>
                                        <a class="btn btn-info oi oi-list" aria-hidden="true" style="cursor:pointer"
                                           href="/services/details/@service.Id"></a>
                                        <a aria-hidden="true" class="btn btn-warning oi oi-pencil" @onclick=@(()=>ShowModal(service.Id,true))></a>
                                        <button aria-hidden="true" class="btn btn-danger oi oi-trash" @onclick="(()=>ServiceDeleteAsync(service.Id))"/>
                                        <a class="btn btn-warning" href="/calendar/Index/@service.Id"><i class="oi oi-calendar"></i> Test Calendar</a>
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
    </div>
}
@code {
    public List<Service>? Services{ get; set; }

    public Service? Service{ get; set; }

    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]// when we change the pag , we don't gonna lose the filter or the page
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    [CascadingParameter]
    IModalService Modal { get; set; } = default!;


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    public async Task LoadAsync(int page=1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }
        string UrlServiceData = string.Empty;
        string urlTotalPages = string.Empty;
        if (string.IsNullOrEmpty(Filter))
        {
            UrlServiceData = $"api/services?page={page}";
            urlTotalPages = $"api/services/totalPages";
        }
        else
        {
            UrlServiceData = $"api/services?page={page}&filter={Filter}";
            urlTotalPages = $"api/services/totalPages?filter={Filter}";
        }

        try
        {
            var responseHttpData = await repository.Get<List<Service>>(UrlServiceData);
            var responseHttpPage = await repository.Get<int>(urlTotalPages);

            Services = responseHttpData.Response;
            totalPages = responseHttpPage.Response;
        }
        catch (Exception ex)
        {
            await swl.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }
    }

    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }


    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<ServiceEdit>(string.Empty, new ModalParameters().Add("Id", id));
        }
        else
        {
            modalReference = Modal.Show<ServiceCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }
    
    public async Task ServiceDeleteAsync(int id)
    {
        var responseHttp = await repository.Get<Service>($"/api/services/{id}");
        Service = responseHttp!.Response;
        //Quesiton before remove
        var result = await swl.FireAsync(
            new SweetAlertOptions
                {
                    Title = "Confirm Delete",
                    Text = $"Are you sure abaout Delete this country ? => {Service!.Name} , {Service.Created}",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Yes"
                }
        );
        var confirmSwl = string.IsNullOrEmpty(result.Value);
        if (confirmSwl)
        {
            return;
        }
        var responseHttpDelete = await repository.Delete($"/api/services/{id}");

        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpDelete.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}
