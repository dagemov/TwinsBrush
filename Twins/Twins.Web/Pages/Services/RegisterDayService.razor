@page "/services/registerDayService/{DayValue}/{id:int}"
@inject NavigationManager nav;
@inject SweetAlertService swl;
@inject IRepository repository;
 

<link rel="stylesheet" href="https://localhost:5001/css/Services.css" />

@if(Services == null){
    <div  class="spinner"></div>
}
else
{
    <div class="card">
        <div class="card-header">
            Services Aviables
        </div>
        <div class="card-body">
            <GenericList MyList="Services">
                <Body>
                    <table class="table table-striped table-responsive">
                        <thead>
                            <tr class="mb-10">
                                <th>Service Name</th>
                                <th>Picture <i class="oi oi-camera-slr"> </i></th>
                                <th>Description</th>
                                <th>Action</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach(var s in Services){
                                @if (s.ServiceStatusType != ServiceStatusType.Due || s.ServiceStatusType != ServiceStatusType.Working)
                                {
                                    <tr class="m-3">
                                        <td>@s.Name</td>
                                        <td class="d-flex justify-content-center">
                                            <img class="imagenModalTable" src="/Images/ServicesExample/No_Picture.jpg" 
                                                />
                                            </td>
                                        <td>@s.Description</td>
                                        <td><a class="btn btn-primary" @onclick="()=>AddService(s)"><i class="oi oi-plus"></i></a></td>
                                    </tr>
                                }
                                
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
        <div class="card-footer d-flex justify-content-center">
            <a class="btn btn-danger" href="/calendar/Index/1">Close <i class="oi oi-X"></i></a>
        </div>
    </div>
}
@code {
    [Parameter]
    public string? DayValue { get; set; }
    [Parameter]
    public int id{ get; set; }
    public List<Service>? Services { get; set; }
    public List<ServiceUser>? Emplooyes{ get; set; }
    public List<AddServiceDay>? ServicesDays{ get; set; }
    [CascadingParameter]
    BlazoredModalInstance BlazoredModal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        await LoadServicesAsync();
       // await GenerateServiceUser();
    }

    private async Task LoadServicesAsync()
    {
        var servicesResponse = await repository.Get<List<Service>>("/api/services");
        if (servicesResponse.Error)
        {
            var message = await servicesResponse.GetErrorMessageAsync();
            await swl.FireAsync("Erro",message,SweetAlertIcon.Error);
        }
        Services = servicesResponse.Response;
    }
    private async Task GenerateServiceUser(int id)
    {

        var htppResponseEmployes = await repository.Get<List<ServiceUser>>($"/api/servicesUsers/ListById?id={id}");
        if (htppResponseEmployes.Error)
        {
            var message = await htppResponseEmployes.GetErrorMessageAsync();
            await swl.FireAsync("Erro", message, SweetAlertIcon.Error);
        }
        Emplooyes = htppResponseEmployes.Response;
    }
    private async Task GeneraServiceDay()
    {
        var httpResponseServiceDay = await repository.Get<List<ServiceDays>>($"/api/serviceDays");
    }
    private async Task AddService(Service s)
    {
        await GenerateServiceUser(s.Id);
        if (Emplooyes == null)
        {
            await swl.FireAsync("Error","\nYou must pull the emplooyes before \nGo to Service Detials in index",SweetAlertIcon.Error);
            return;
        }
        AddServiceDay addService = new()
            {
                Id = s.Id,
                Name = s.Name,
                Description = s.Description,
                DayValue = DayValue,
                Users = Emplooyes
            };
        var httpPost = await repository.Post<AddServiceDay>($"/api/services/ServiceDay", addService);
        if (httpPost.Error)
        {
            var message = await httpPost.GetErrorMessageAsync();
            await swl.FireAsync("Error",message,SweetAlertIcon.Error);
        }
        else
        {
            //var ServiceDay = httpPost.Response;
            foreach (var employee in Emplooyes)
            {
                employee.ServiceDayId = addService.Id;
                employee.UpdateDate = DateTime.Now;
                var htppPost = await repository.Put<ServiceUser>($"/api/servicesUsers", employee);
                if (htppPost.Error)
                {
                    var message = await httpPost.GetErrorMessageAsync();
                    await swl.FireAsync($"Error",$"Error with this record : {employee.EmployedDocument}\n" + message, SweetAlertIcon.Error);
                    return;
                }
            }           
            await swl.FireAsync("Succes", "Macth register", SweetAlertIcon.Success);
            await BlazoredModal.CloseAsync(ModalResult.Ok());
        }
        

    }
}
