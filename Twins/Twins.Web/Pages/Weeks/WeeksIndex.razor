@page "/weeks"

@inject IRepository repository;
@inject NavigationManager nav;
@inject SweetAlertService swl;
@attribute [Authorize(Roles = "Admin,Employed")]


<a class="btn btn-primary" href="/weeks/create"> New week</a>
<select @onchange="LoadCalendar">
    @foreach (string monthName in MonthNames)
    {
        <option>@monthName</option>
    }
</select>
<GenericList MyList="Weeks">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                    <th>Week</th>
                    <th>Days Worked on the Week</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var week in Weeks!)
                {
                    <tr>

                        <td>
                            @week.WeekNumber
                        </td>
                        <td>
                            @week.DaysNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/weeks/details/@week.Id">Details</a>
                            <a class="btn btn-warning" href="/weeks/edit/@week.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(()=>DeleteWeekAsync(week.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
<table class="table table-bordered table-striped">
    <thead>
        <tr>
            @for (var dayIndex=0;dayIndex<DaysNames.Count();dayIndex++)
            {
                <th>
                    @DaysNames[dayIndex]
                </th>
            }
        </tr>
    </thead>
    <tbody>
        @for (var weekIndex = 0; weekIndex<Weeks!.Count();weekIndex++)
        {
            <tr>
                @for (var dayIndex=0;dayIndex<Weeks![weekIndex]!.Days!.Count();dayIndex++)
                {
                    var wIndex = weekIndex;
                    var dIndex = dayIndex;
                    <td>
                        @DaysMonths.TotalHours
                        <br/>
                        <label style="color:#c00;font-weight:bold">
                            @DaysMonths.EndDay
                        </label>
                        <br/>

                    </td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    public List<WeekWorked>? Weeks { get; set; }
    public List<string> MonthNames = new List<string>();
    public List<string> DaysNames = new List<string>();
    public Day DaysMonths{ get; set; }
    DateTime StartDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1);
    DateTime EndDate = (new DateTime(DateTime.Now.Year, DateTime.Now.Month, 1)).AddMonths(1).AddDays(-1);

    private WeekWorked? week { get; set; }

    protected override async Task OnInitializedAsync()
    {
        //Load metada list
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<WeekWorked>>("/api/weeks");
        Weeks = responseHttp.Response;
        MonthNames = System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.MonthGenitiveNames.ToList();
        GenerateCalendarHead();
        GenerateCalendarBody();
    }

    public async Task DeleteWeekAsync(int id)
    {
        var responseHttp = await repository.Get<WeekWorked>($"/api/weeks/{id}");
        week = responseHttp!.Response;
        var result = await swl.FireAsync(
            new SweetAlertOptions
                {
                    Title = "Confirm Delete",
                    Text = $"Are you sure abaout Delete this Week ? => {week!.WeekNumber}",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Yes"
                }
        );
        var confirmSwl = string.IsNullOrEmpty(result.Value);
        if (confirmSwl)
        {
            return;
        }
        var responseHttpDelete = await repository.Delete($"/api/weeks/{id}");

        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpDelete.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
    private void LoadCalendar(ChangeEventArgs e)
    {
        var monthSelected = e.Value!.ToString();
        int monthIndex = DateTime.ParseExact(monthSelected!, "MMM", System.Globalization.CultureInfo.CreateSpecificCulture("en-GB")).Month;
        StartDate = new DateTime(DateTime.Now.Year, monthIndex, 1);
        EndDate = (new DateTime(DateTime.Now.Year, monthIndex, 1)).AddMonths(1).AddDays(-1);
    }
    private void GenerateCalendarHead()
    {
        var day1 = new List<string>();
        for (var dt = StartDate; dt <= EndDate;dt=dt.AddDays(1))
        {
            day1.Add(dt.ToString("dddd"));
        }
        DaysNames = day1.Distinct().ToList();
    }
    private void GenerateCalendarBody()
    {
        Weeks = new List<WeekWorked>();
        int flag = 0;
        List<Day> days = new List<Day>();
        var totalDaysMonth = (int)(EndDate - StartDate).TotalDays;
        int countDays = 0;

        for (var dt=StartDate;dt<=EndDate;dt=dt.AddDays(1))
        {
            flag++;
            days.Add(new Day()
            {

            });
            if (flag == 7)
            {
                week = new WeekWorked();
                week.Days = days;
                Weeks.Add(week);

                days = new List<Day>();
                flag = 0;
            }
            if (countDays == totalDaysMonth)
            {
                week = new WeekWorked();
                week.Days = days;
                Weeks.Add(week);
                break;
            }
            countDays++;
        }

    }
}
