@page "/weeks/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager nav
@inject SweetAlertService swl

@if (weekWorked is null)
{
    <p>Loading...</p>
}
else
{
    <h3>Details  Week @weekWorked!.WeekNumber</h3>
    <div class="mb-3">
        @if(weekWorked!.Days!.Count<7){
            <a class="btn btn-primary" href="/days/create/@weekWorked.Id">Add Day</a>
        }   
        <a class="btn btn-success" href="/weeks">Back</a>
     
    </div>
}

<GenericList MyList="Days">
   
    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                    <th>Startd Day</th>
                    <th>End Day</th>
                    <th>Totals Day Hours</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var day in Days!)
                {
                    <tr>

                        <td>
                            @day.StartDay
                        </td>
                        <td>
                            @day.EndDay
                        </td>
                        <td>
                            @day.TotalHours
                        </td>
                        <td>
                            <a class="btn btn-info" href="/days/details/@day.Id">Details</a>
                            <a class="btn btn-warning" href="/days/edit/@day.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(()=>DeleteAsync(day.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
@if (weekWorked is null)
{
    <p>Loading...</p>
}
else
{
    <h2>    Totasl Hours On the Week  @weekWorked.WeekNumber : { @totalHours.ToString("F2") } </h2>
    <h2>Total To pay at the employed : {@totalPriceHoursDay.ToString("F2")}</h2>
}

@code {

    private WeekWorked? weekWorked { get; set; }
    private Day? day { get; set; }
    public List<Day>? Days { get; set; }
    public List<TimeSpan>? list = new();
    public double totalHours = 0.0D;
    public double totalPriceHoursDay = 0.0D;
    [Parameter]
    public int Id { get; set; }
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttpData = await repository.Get<WeekWorked>($"/api/weeks/{Id}");
        if (responseHttpData.Error)
        {
            if (responseHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/weeks");
                return;
            }
            var message = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        weekWorked = responseHttpData.Response;
        Days = weekWorked!.Days!.ToList();

        await LoadAcumDay();
    }
        /*
        private async Task LoadSumDay()
        {
        //Days!.ForEach(x => sum += x.TotalHours!);
        double valhour = 0.0D;

            @foreach (var day in Days!)
            {
            sum = (day.EndDay-day.StartDay);
            sum = (sum + sum);
            //list!.Add();
            valhour = Convert.ToDouble(day.TotalHours) * 14.85;
            totals += Convert.ToDouble(day.TotalHours);
    }

    }*/
    private async Task LoadAcumDay()
    {
        //double totalHours = 0.0D;
        List<double> totals = new List<double>(); // Lista para almacenar los totales de cada día

        foreach (var day in Days!)
        {
            // Fix the nullable TimpeSpan? to TimeSpan
            if (day.StartDay.HasValue && day.EndDay.HasValue)
            {
                double dayDurationInHours = (day.EndDay.Value - day.StartDay.Value).TotalHours;

                totalHours += dayDurationInHours;

                double valhour = dayDurationInHours * 14.85;
                totalPriceHoursDay += valhour;

                totals.Add(valhour);
            }
            else
            {
               
                Console.WriteLine($"Error: StartDay o EndDay is null to one day in Specific :  {day.Id}");
            }
        }

    }
    public async Task DeleteAsync(int id)
    {
        var responseHttpData = await repository.Get<Day>($"/api/days/{id}");
        if (responseHttpData.Error)
        {
            if (responseHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/weeks");
                return;
            }
            var message = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        day = responseHttpData.Response;

        var resultSwl = await swl.FireAsync(new SweetAlertOptions
            {
                Title = "Confirm Delete",
                Text = $"Are you sure abaout Delete this State ? : < {day!.StartDay} > ",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText = "No",
                ConfirmButtonText = "Yes",
            });
        var confirm = string.IsNullOrEmpty(resultSwl.Value);
        if (confirm)
        {
            return;
        }

        var responseHttpDelete = await repository.Delete($"/api/days/{id}");
        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpData.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            var messageDanger = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", messageDanger, SweetAlertIcon.Error);
        }
        await LoadAsync();
    }
}
