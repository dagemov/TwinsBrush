@page "/categories"

@inject IRepository repository;
@inject NavigationManager nav;
@inject SweetAlertService swl;
@attribute [Authorize(Roles = "Admin")]
@if (Categories is null)
{
    <div class="spinner"></div>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                Categories <i class="oi oi-tag"></i>
                <a class="btn btn-primary float-end" @onclick=@(()=>ShowModal())> New Category <i class="oi oi-plus"></i></a>
            </span>
        </div>
        <div class="card-body">

            <GenericList MyList="Categories">
                <Body>
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th></th>
                                <th>Category</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var category in Categories!)
                            {
                                <tr>
                                    <td>
                                        <a class="btn btn-warning" @onclick=@(()=>ShowModal(category.Id,true))>Edit</a>
                                        <button class="btn btn-danger" @onclick="(()=>CategoryDeleteAsync(category.Id))">Delete</button>
                                    </td>
                                    <td>
                                        @category.Name
                                    </td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </Body>
            </GenericList>
        </div>
        <div class="card-footer">

        </div>
    </div>       
}
@code {
    public List<Category>? Categories { get; set; }

    private Category? category;
    //modal inyection
    [CascadingParameter]
    IModalService Modal { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        //Load metada list
        await LoadAsync();
    }
    private async Task ShowModal(int id = 0, bool isEdit = false)
    {
        IModalReference modalReference;

        if (isEdit)
        {
            modalReference = Modal.Show<CategoryEdit>(string.Empty, new ModalParameters().Add("CategoryId", id));
        }
        else
        {
            modalReference = Modal.Show<CategoryCreate>();
        }

        var result = await modalReference.Result;
        if (result.Confirmed)
        {
            await LoadAsync();
        }
    }

    public async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Category>>("/api/categories");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await swl.FireAsync("Erro",message,SweetAlertIcon.Error);
        }
        Categories = responseHttp.Response;
    }

    public async Task CategoryDeleteAsync(int id)
    {
        var resultHttpGet = await repository.Get<Category>($"/api/categories/{id}");
        category = resultHttpGet!.Response;
        var result = await swl.FireAsync(
            new SweetAlertOptions
                {
                    Title = "Confirm Delete",
                    Text = $"Are you sure abaout Delete this category ? => {category!.Name}",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    CancelButtonText = "No",
                    ConfirmButtonText = "Yes"
                }
        );
        var confirm = string.IsNullOrEmpty(result.Value);
        if (confirm)
        {
            return;
        }
        var resultHttpDelete = await repository.Delete($"/api/categories/{id}");
        if (resultHttpDelete.Error)
        {
            if (resultHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await resultHttpDelete.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}
