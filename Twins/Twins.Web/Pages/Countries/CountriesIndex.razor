@page "/countries"


@inject IRepository repository;
@inject NavigationManager nav;
@inject SweetAlertService swl;

@attribute [Authorize(Roles="Admin")]

<h3>Countries</h3>
<div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
    <div>
        <a class="btn btn-primary" href="/countries/create">New Country</a>
    </div>
    <div class="mx-2">
        <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Search Country" @bind-value="Filter" />
    </div>
    <div>
        <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync">Filter</button>
        <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync">Clear</button>
    </div>
</div>

<Pagination CurrentPage="currentPage" TotalPages="1" SelectedPage="SelectedPageAsync" />
<GenericList MyList="Countries">

    <Body>       
        <table class="table table-striped">
            <thead>
                <tr>
                    
                    <th>Country</th>
                    <th style="width:220px">States</th> <!--Para que no se muevan los botones de paginacion , darles size static-->
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        
                        <td>
                            @country.Name
                        </td>
                        <td>
                            @country.StatesNumber
                        </td>
                        <td>
                            <a class="btn btn-info oi oi-info" aria-hidden="true" style="cursor:pointer" href="/countries/details/@country.Id"></a>
                            <a aria-hidden="true" class="btn btn-warning oi oi-pencil" href="/countries/edit/@country.Id"></a>
                            <button aria-hidden="true" class="btn btn-danger oi oi-trash" @onclick="(()=>CountryDeleteAsync(country.Id))"></button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    //Making Data index with Blazor :) . Remmeber create the reference
    public List<Country>? Countries { get; set; }
    private Country? country { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]// when we change the pag , we don't gonna lose the filter or the page
    public string Page { get; set; } = string.Empty;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = string.Empty;

    //With metodo on , we get all the metadata abaout whatever Tmodel
    protected override async Task OnInitializedAsync()
    {
        //Load metada list
        await LoadAsync();
    }

    private async Task LoadAsync(int page = 1)
    {
        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);// if we get Page from the queryString , asum that Page and convert to int
        }

        string urlDataCountries = string.Empty;
        string urlTotalPages = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            urlDataCountries = $"api/countries?page={page}";
            urlTotalPages = $"api/countries/totalPages";
        }
        else
        {
            urlDataCountries = $"api/countries?page={page}&filter={Filter}";
            urlTotalPages = $"api/countries/totalPages?filter={Filter}";
        }

        try
        {
            var responseHttpData = await repository.Get<List<Country>>(urlDataCountries);
            var responseHttpPage = await repository.Get<int>(urlTotalPages);

            Countries = responseHttpData.Response;
            totalPages = responseHttpPage.Response;
        }
        catch(Exception ex)
        {
            await swl.FireAsync("Error", ex.Message, SweetAlertIcon.Error);
        }

        
    }
   
    private async Task SelectedPageAsync(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    public async Task CountryDeleteAsync(int id)
    {
        //Get metada to show in swl
        var responseHttp = await repository.Get<Country>($"/api/countries/{id}");
        country = responseHttp!.Response;
        //Quesiton before remove
        var result = await swl.FireAsync(
            new SweetAlertOptions
            {
                Title="Confirm Delete",
                Text=$"Are you sure abaout Delete this country ? => {country!.Name}",
                Icon= SweetAlertIcon.Question,
                ShowCancelButton=true,
                CancelButtonText="No",
                ConfirmButtonText="Yes"
            }
        );
        var confirmSwl = string.IsNullOrEmpty(result.Value);
        if (confirmSwl)
        {
            return;
        }
        var responseHttpDelete = await repository.Delete($"/api/countries/{id}");

        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpDelete.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPageAsync(page);
    }

}
