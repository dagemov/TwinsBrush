@page "/countries"

@inject IRepository repository;
@inject NavigationManager nav;
@inject SweetAlertService swl;

<h3>Countries</h3>
<a class="btn btn-primary" href="/countries/create"> New Country</a>
<GenericList MyList="Countries">

    <Body>       
        <table class="table table-striped">
            <thead>
                <tr>
                    <th></th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var country in Countries!)
                {
                    <tr>
                        <td>
                            <a class="btn btn-warning" href="/countries/edit/@country.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(()=>CountryDeleteAsync(country.Id))">Delete</button>
                        </td>
                        <td>
                            @country.Name
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    //Making Data index with Blazor :) . Remmeber create the reference
    public List<Country>? Countries { get; set; }
    private Country? country { get; set; }

    //With metodo on , we get all the metadata abaout whatever Tmodel
    protected override async Task OnInitializedAsync()
    {
        //Load metada list
        await LoadAsync();
    }
    private async Task LoadAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries");
        Countries = responseHttp.Response;
    }
   
    public async Task CountryDeleteAsync(int id)
    {
        //Get metada to show in swl
        var responseHttp = await repository.Get<Country>($"/api/countries/{id}");
        country = responseHttp!.Response;
        //Quesiton before remove
        var result = await swl.FireAsync(
            new SweetAlertOptions
            {
                Title="Confirm Delete",
                Text=$"Are you sure abaout Delete this country ? => {country!.Name}",
                Icon= SweetAlertIcon.Question,
                ShowCancelButton=true,
                CancelButtonText="No",
                ConfirmButtonText="Yes"
            }
        );
        var confirmSwl = string.IsNullOrEmpty(result.Value);
        if (confirmSwl)
        {
            return;
        }
        var responseHttpDelete = await repository.Delete($"/api/countries/{id}");

        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpDelete.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
        }
        await LoadAsync();
    }
}
