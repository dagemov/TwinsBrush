@page "/countries/details/{Id:int}"
@inject IRepository repository
@inject NavigationManager nav
@inject SweetAlertService swl

@if(country is null){
    <p>Loading...</p>
}
else
{
   <h3>Details @country.Name</h3>
   <div class="mb-3">
        <a class="btn btn-primary" href="/states/create/@country.Id">New State</a>
        <a class="btn btn-success" href="/countries">Back</a>
   </div>   
   <Pagination CurrentPage="currentPage" TotalPages="totalPages" SelectedPage="SelectedPageAsycn"/>

<GenericList MyList="states">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>

                    <th>State</th>
                    <th style="width:140px">Cities</th>
                    <th style="width:260px"></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var state in states!)
                {
                    <tr>

                        <td>
                            @state.Name
                        </td>
                        <td>
                            @state.CitiesNumber
                        </td>
                        <td>
                            <a class="btn btn-info" href="/states/details/@state.Id">Details</a>
                            <a class="btn btn-warning" href="/states/edit/@state.Id">Edit</a>
                            <button class="btn btn-danger" @onclick="(()=>StateDeleteAsync(state.Id))">Delete</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>
}

@code {

    private Country? country { get; set; }
    private State? state{ get; set; }
    private int currentPage = 1;
    private int totalPages;
    public List<State>? states{ get; set; }
    [Parameter]
    public int Id { get; set; }

    private async Task SelectedPageAsycn(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }
    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }
    private async Task LoadAsync(int page = 1)
    {
        string urlDataState = $"/api/states?id={Id}&page={page}";
        string urlPages = $"/api/states/totalPages?id={Id}";                     
       
        var responseHttpData = await repository.Get<Country>($"/api/countries/{Id}");
        if (responseHttpData.Error)
        {
            if (responseHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/countries");
                return;
            }
            var message = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error geting contry", message, SweetAlertIcon.Error);
            return;
        }

        var resonseHttpDataState = await repository.Get<List<State>>(urlDataState);
        if (resonseHttpDataState.Error)
        {
            if (resonseHttpDataState.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/countries");
                return;
            }
            var message = await resonseHttpDataState.GetErrorMessageAsync();
            await swl.FireAsync("Error List State", message, SweetAlertIcon.Error);
        }

        var responseHtttpPages = await repository.Get<int>(urlPages);

        country = responseHttpData.Response;
        states = resonseHttpDataState.Response;
        totalPages = responseHtttpPages.Response;
        
             
        //states = country!.States!.ToList();
    }
    public async Task StateDeleteAsync(int id)
    {
        var responseHttpData = await repository.Get<State>($"/api/states/{id}");
        if (responseHttpData.Error)
        {
            if (responseHttpData.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                nav.NavigateTo("/countries");
                return;
            }
            var message = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        state = responseHttpData.Response;

        var resultSwl = await swl.FireAsync(new SweetAlertOptions
        {
                Title = "Confirm Delete",
                Text = $"Are you sure abaout Delete this State ? : < {state!.Name} > ",
                Icon=SweetAlertIcon.Question,
                ShowCancelButton = true,
                CancelButtonText="No",
                ConfirmButtonText="Yes",
        });
        var confirm = string.IsNullOrEmpty(resultSwl.Value);
        if (confirm)
        {
            return;
        }

        var responseHttpDelete = await repository.Delete($"/api/states/{id}");
        if (responseHttpDelete.Error)
        {
            if (responseHttpDelete.HttpResponseMessage.StatusCode != HttpStatusCode.NotFound)
            {
                var message = await responseHttpData.GetErrorMessageAsync();
                await swl.FireAsync("Error", message, SweetAlertIcon.Error);
                return;
            }
            var messageDanger = await responseHttpData.GetErrorMessageAsync();
            await swl.FireAsync("Error", messageDanger, SweetAlertIcon.Error);
        }
        await LoadAsync();
    }
}
