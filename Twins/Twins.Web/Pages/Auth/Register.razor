@page "/Register"



@inject IRepository repository
@inject SweetAlertService sweetAlertService
@inject NavigationManager navigationManager
@inject ILoginService loginService



<EditForm Model="userDTO" OnValidSubmit="CreteUserAsync">
    <DataAnnotationsValidator />
    <div class="card">
        <div class="card-header">
            <h3>Register New User <i class="oi oi-person"></i></h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <div class="mb-3">
                        <label>Names:</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.FirstName" />
                            <ValidationMessage For="@(() => userDTO.FirstName)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Last Names :</label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.LastName" />
                            <ValidationMessage For="@(() => userDTO.LastName)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Document : <i class="oi oi-document"></i></label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Documment" />
                            <ValidationMessage For="@(() => userDTO.Documment)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label> Phone : <i class="oi oi-phone"></i></label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.PhoneNumber" />
                            <ValidationMessage For="@(() => userDTO.PhoneNumber)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Picture : <i class="oi oi-image"></i></label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Photo" />
                            <ValidationMessage For="@(() => userDTO.Photo)" />
                        </div>
                    </div>
                </div>
                <div class="col-6">
                    <div class="mb-3">
                        <label> Country <i class="oi oi-globe"></i></label>
                        <select class="form-select" @onchange="CountryChangedAsycn">
                            <option value="0">-- Choose one Country --</option>
                            @if (countries is not null)
                            {
                                @foreach (var country in countries)
                                {
                                    <option value="@country.Id">@country.Name</option>
                                }
                            }
                        </select>
                    </div>
                    <div class="mb-3">
                        <label>State </label>
                        <div>
                            <select class="form-select" @onchange="StateChangedAsync">
                                <option value="0">-- Choose one State --</option>
                                @if (states is not null)
                                {
                                    @foreach (var state in states)
                                    {
                                        <option value="@state.Id">@state.Name</option>
                                    }
                                }
                            </select>
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>City </label>
                        <div>
                            <select class="form-select" @bind="userDTO.CityId">
                                <option value="0">-- Choose one city --</option>
                                @if (cities is not null)
                                {
                                    @foreach (var city in cities)
                                    {
                                        <option value="@city.Id">@city.Name</option>
                                    }
                                }
                            </select>
                            <ValidationMessage For="@(() => userDTO.CityId)" />
                        </div>
                    </div>

                    <div class="mb-3">
                        <label> Email : <i class="oi oi-envelope-closed"></i></label>
                        <div>
                            <InputText class="form-control" @bind-Value="@userDTO.Email" />
                            <ValidationMessage For="@(() => userDTO.Email)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Password : <i class="oi oi-key"></i> </label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.Password" />
                            <ValidationMessage For="@(() => userDTO.Password)" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label>Password Confirm : <i class="oi oi-key"></i></label>
                        <div>
                            <InputText type="password" class="form-control" @bind-Value="@userDTO.ConfirmPassword" />
                            <ValidationMessage For="@(() => userDTO.ConfirmPassword)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="card-footer d-flex justify-content-center ">

            <div class="m-4">
                <a class="btn btn-danger" href="/">Cancel <i class="oi oi-x"></i> </a>
            </div>
            <div class="m-4">
                <button class="btn btn-primary" type="submit">Register <i class="oi oi-plus"></i> </button>
            </div>
            
           
            
        </div>
    </div>
   
    
</EditForm>

@code {
    private UserDTO userDTO = new();
    private List<Country>? countries;
    private List<State>? states;
    private List<City>? cities;

    protected async override Task OnInitializedAsync()
    {
        await LoadCountriesAsync();
    }

    private async Task LoadCountriesAsync()
    {
        var responseHttp = await repository.Get<List<Country>>("/api/countries/combo");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        countries = responseHttp.Response;
    }
    private async Task LoadStatesAsync(int countryId)
    {
        var responseHttp = await repository.Get<List<State>>($"/api/states/combo/{countryId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        states = responseHttp.Response;
    }
    private async Task LoadCitiesAsync(int stateId)
    {
        var responseHttp = await repository.Get<List<City>>($"/api/cities/combo/{stateId}");
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        cities = responseHttp.Response;
    }

    private async Task CountryChangedAsycn(ChangeEventArgs change)
    {
        var selectedCountry = Convert.ToInt32(change.Value!);
        await LoadStatesAsync(selectedCountry);
    }
    private async Task StateChangedAsync(ChangeEventArgs change)
    {
        var selectedState = Convert.ToInt32(change.Value!);
        await LoadCitiesAsync(selectedState);
    }

    private async Task CreteUserAsync()
    {
        userDTO.UserName = userDTO.Email;
        userDTO.UserType = UserType.User;
        var responseHttp = await repository.Post<UserDTO, TokenDTO>("/api/accounts/CreateUser", userDTO);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await loginService.LoginAsync(responseHttp.Response!.Token);
        navigationManager.NavigateTo("/");
    }
}
